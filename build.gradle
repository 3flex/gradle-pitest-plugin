apply plugin: 'groovy'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'ru.vyarus.animalsniffer'

group = 'info.solidsoft.gradle.pitest'

sourceCompatibility = 1.7

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.4.1'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.0.1'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
    }
}

apply plugin: 'com.gradle.plugin-publish'

pluginBundle {
    website = 'http://gradle-pitest-plugin.solidsoft.info/'
    vcsUrl = 'https://github.com/szpak/gradle-pitest-plugin'

    plugins {
        plugin {
            id = 'info.solidsoft.pitest'
            displayName = 'Gradle plugin for PIT mutation testing'
            description = 'Just what it says on the tin.'
            tags = ['test', 'pit', 'mutation-testing']
        }
    }
}

scmVersion {
    tag {
        prefix = 'release'
        versionSeparator = '/'
    }
    hooks {
        pre 'fileUpdate', [file       : 'README.md', pattern: { v, p -> /classpath\ 'info\.solidsoft\.gradle\.pitest:gradle-pitest-plugin:.*'/ },
                           replacement: { v, p -> "classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:$v\'" }]
        pre 'fileUpdate', [file       : 'README.md', pattern: { v, p -> /id\ 'info\.solidsoft\.pitest'\ version\ '.*'/ },
                           replacement: { v, p -> "id 'info.solidsoft.pitest' version '$v'" }]
        pre 'commit', { v, p -> "Release version: ${v}\n\n[ci skip]" }
    }
}

project.version = scmVersion.version

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

sourceSets {
    funcTest {
        java.srcDir file('src/funcTest/java')
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        //groovy 2.3.x is already provided by Gradle itself
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testCompile 'cglib:cglib-nodep:2.2.2'   //for Spying in Spock
    testCompile 'junit:junit:4.12'

    funcTestCompile sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestCompile configurations.testCompile
    funcTestRuntime configurations.testRuntime
    funcTestCompile('com.netflix.nebula:nebula-test:4.4.3') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    signature 'org.codehaus.mojo.signature:java17:1.0@signature'
}

task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'

    testClassesDir = sourceSets.funcTest.output.classesDir
    classpath = sourceSets.funcTest.runtimeClasspath

    reports.html {
        destination = file("${reporting.baseDir}/funcTests")
    }
}
funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses
uploadArchives.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

animalsniffer {
    sourceSets = [project.sourceSets.main]  //just for production classes - Animal Sniffer fails with: 'Undefined reference: void for Spock tests'
                                            //https://github.com/mojohaus/animal-sniffer/issues/27
}

tasks.withType(ru.vyarus.gradle.plugin.animalsniffer.AnimalSniffer) {
    onlyIf { project.hasProperty('compatibility') }
}

nexusStaging {
    packageGroup = "info.solidsoft"
    stagingProfileId = "34a3a5beeaa96"
}

modifyPom {
    project {
        name 'Gradle PIT Plugin'
        description 'Gradle plugin for PIT Mutation Testing'
        url 'http://gradle-pitest-plugin.solidsoft.info/'

        scm {
            connection 'scm:git:git://github.com/szpak/gradle-pitest-plugin.git'
            developerConnection 'scm:git:git@github.com:szpak/gradle-pitest-plugin.git'
            url 'https://github.com/szpak/gradle-pitest-plugin'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin ZajÄ…czkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'despot'
                    role 'developer'
                }
            }
        }
    }
}
