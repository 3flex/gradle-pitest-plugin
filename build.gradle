apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'uploadAuth'

ext.isReleaseVersion = !project.version.endsWith("SNAPSHOT")

sourceCompatibility = 1.6

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        //TODO: MZA: Upgrade to 2.0.x when fixed: https://github.com/sebersole/gradle-maven-publish-auth/issues/7
        classpath 'org.hibernate.build.gradle:gradle-upload-auth-plugin:1.1.1'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile('org.spockframework:spock-core:0.7-groovy-1.8') {
        //groovy 1.8.6 is already provided by Gradle itself
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:2.2.2'   //for Spying in Spock
    testCompile 'junit:junit:4.11'
}

idea {
    project {
        jdkName = '1.6'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task groovydocJar(type: Jar, dependsOn: javadocJar) {
    classifier = 'groovydoc'
    from groovydoc.outputs.files
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives groovydocJar
}

if (isReleaseVersion) {
    //activate signing only for release versions (it is not needed for 'gradle install')
    apply plugin: 'signing'

    signing {
        sign configurations.archives
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof org.gradle.plugins.signing.Sign }) {
            if (!project.hasProperty("signing.keyId") || !project.hasProperty("signing.secretKeyRingFile")) {
                throw new GradleException("signing.keyId and signing.secretKeyRingFile has to be configured (e.g. in ~/.gradle/gradle.properties)")
            }
            Console console = System.console()
            if (console) {
                def keyPassword = console.readPassword("\nEnter a private key password: ")
                ext."signing.password" = keyPassword
            } else {
                throw new GradleException("Unable to get console. Make sure to not running a signing task in a daemon mode (e.g. use --no-daemon).")
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            name = 'Sonatype OSS'
            repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2')
            snapshotRepository(id: 'sonatype-nexus-snapshots', url: 'https://oss.sonatype.org/content/repositories/snapshots')

            beforeDeployment {
                if (isReleaseVersion) {
                    signing.signPom it
                }
            }

            pom.project {
                name 'Gradle PIT Plugin'
                description 'Gradle plugin for PIT Mutation Testing'
                url 'http://gradle-pitest-plugin.solidsoft.info/'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'szpak'
                        name 'Marcin ZajÄ…czkowski'
                        email 'mszpak ATT wp DOTT pl'
                        roles {
                            role 'founder'
                            role 'despot'
                            role 'developer'
                        }
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/szpak/gradle-pitest-plugin.git'
                    developerConnection 'scm:git:git@github.com:szpak/gradle-pitest-plugin.git'
                    url 'https://github.com/szpak/gradle-pitest-plugin'
                }
            }
        }
    }
}

//Artifacts are not placed directly into JCenter, so for now a 'gradle-plugin' attribute has to be set manually to
//'info.solidsoft.pitest:info.solidsoft.gradle.pitest:gradle-pitest-plugin' via GUI after sync

wrapper {
    gradleVersion '1.12'
}
