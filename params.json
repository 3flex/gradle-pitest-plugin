{"name":"gradle-pitest-plugin","tagline":"Gradle plugin for PIT Mutation Testing","body":"# Gradle plugin for PIT Mutation Testing\r\n\r\nThe plugin provides an ability to perform a [mutation testing](https://en.wikipedia.org/wiki/Mutation_testing) and\r\ncalculate a mutation coverage of a [Gradle](http://gradle.org/)-based project with [PIT](http://pitest.org/).\r\n\r\n## Quick start\r\n\r\nAdd gradle-pitest-plugin and pitest itself to the buildscript dependencies in your build.gradle file:\r\n\r\n    buildscript {\r\n        repositories {\r\n            mavenCentral()\r\n            mavenLocal()\r\n            //Needed only for SNAPSHOT versions\r\n            //maven { url \"http://oss.sonatype.org/content/repositories/snapshots/\" }\r\n        }\r\n        dependencies {\r\n            classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:0.30.1'\r\n            classpath \"org.pitest:pitest:0.30\"\r\n        }\r\n    }\r\n\r\nApply plugin:\r\n\r\n    apply plugin: \"pitest\"\r\n\r\nAdd a pitest configuration closure:\r\n\r\n    pitest {\r\n        targetClasses = ['our.base.package.*']\r\n    }\r\n\r\nCall Gradle with pitest task:\r\n\r\n    gradle pitest\r\n\r\nAfter the measurements a report created by PIT will be placed in ${PROJECT_DIR}/build/reports/pitest directory.\r\n\r\n## Plugin configuration\r\n\r\nThe Pitest plugin has to be configured. All the [command line options](http://pitest.org/quickstart/commandline/) are\r\nsupported. To make life easier taskClasspath, mutableCodePaths, sourceDirs, reportDir and pitestVersion are\r\nautomatically set by a plugin. In addition sourceDirs, reportDir and pitestVersion can be overridden by an user.\r\n\r\nThere is one mandatory parameter - targetClasses - which points to the classes which should be mutated. In case of using\r\nnot default PIT version the pitestVersion parameter should be used to override it.\r\n\r\nThe configuration in Gradle is the real Groovy code which makes all assignments very intuitive. All values expected by\r\nPIT should be passed as a corresponding types. There is only one important difference. For the parameters where PIT expects\r\na coma separated list of strings in a Gradle configuration a list of strings should be used (see outputFormats in the \r\nfollowing example).\r\n\r\n    pitest {\r\n        targetClasses = ['our.base.package.*']\r\n        pitestVersion = \"0.31\" //not needed when a default PIT version should be used\r\n        threads = 4\r\n        outputFormats = ['XML', 'HTML']\r\n    }\r\n\r\nCheck PIT documentation for a [list](http://pitest.org/quickstart/commandline/) of all available command line parameters.\r\n\r\nThere are a few parameters specific for Gradle plugin:\r\n - enableDefaultIncrementalAnalysis - enables incremental analysis in PIT using the default settings (build/pitHistory.txt\r\nfile for both input and output locations) (since 0.29.0)\r\n - testSourceSets - defines test source sets which should be used by PIT (by default sourceSets.test, but allows\r\nto add integration tests located in a different source set) (since 0.30.1)\r\n - mainSourceSets - defines main source sets which should be used by PIT (by default sourceSets.main) (since 0.30.1)\r\n\r\nFor example:\r\n\r\n    pitest {\r\n        ...\r\n        enableDefaultIncrementalAnalysis = true\r\n        testSourceSets = [sourceSets.test, sourceSets.integrationTest]\r\n        mainSourceSets = [sourceSets.main, sourceSets.additionalMain]\r\n    }\r\n\r\n## Multi-module projects support\r\n\r\ngradle-pitest-plugin can be used in multi-module projects. The plugin has to be applied in all subprojects which should be\r\nprocessed with PIT. A sample snippet from build.gradle located for the root project:\r\n\r\n    subprojects {\r\n        ...\r\n        apply plugin: 'pitest'\r\n\r\n        pitest {\r\n            targetClasses = ['our.base.package.*']\r\n            threads = 4\r\n\r\n            if (project.name in ['module-without-any-test'] {\r\n                failWhenNoMutation = false\r\n            }\r\n        }\r\n    }\r\n\r\nCurrently PIT [does not provide](https://code.google.com/p/pitestrunner/issues/detail?id=41) an aggregated report for\r\nmulti-module project. A report for each module has to be browsed separately. Alternatively a\r\n[PIT plugin for Sonar](https://docs.codehaus.org/display/SONAR/Pitest) can be used to get aggregated results.\r\n\r\n## Versions\r\n\r\nEvery gradle-pitest-plugin version by default uses a predefined PIT version. Usually this a the latest released version\r\nof PIT available at the time of releasing a plugin version. It can be overridden by using pitestVersion parameter\r\nin a pitest configuration closure *and* specifying *the same* version as a buildscript dependency.\r\n\r\nNote. There could be some issues when using non default PIT versions.\r\n\r\ngradle-pitest-plugin 0.30.x uses PIT 0.30, 0.29.0 uses PIT 0.29. etc.\r\n\r\nNote. 0.27 is not supported due to [issue 47](https://code.google.com/p/pitestrunner/issues/detail?id=47).\r\n\r\ngradle-pitest-plugin 0.30.0 was tested with Gradle 1.5 and 1.6 under OpenJDK 7 and Sun 1.6.\r\n\r\n## FAQ\r\n\r\n1. Why have I got \"java.lang.VerifyError: Expecting a stackmap frame...\" when using Java 7?\r\n\r\n    It should be fixed in PIT 0.29.\r\n    As a workaround in older versions add \"jvmArgs = '-XX:-UseSplitVerifier'\" to a pitest configuration block\r\n\r\n        pitest {\r\n            ...\r\n            jvmArgs = '-XX:-UseSplitVerifier'\r\n        }\r\n\r\n## Known issues\r\n\r\n - too verbose output from PIT\r\n\r\n## Development\r\n\r\ngradle-pitest-plugin cloned from the repository can be built using Gradle command:\r\n\r\n    ./gradlew build\r\n\r\nThe easiest way to make a JAR with local changes visible in another project is to install it into the local Maven repository\r\n\r\n    ./gradlew install\r\n\r\n## Support\r\n\r\n[gradle-pitest-plugin](http://gradle-pitest-plugin.solidsoft.info/) was written by Marcin ZajÄ…czkowski.\r\nThe author can be contacted directly via email: mszpak ATT wp DOTT pl.\r\nThere is also Marcin's blog available: [Solid Soft](http://blog.solidsoft.info) - working code is not enough.\r\n\r\nThe plugin surely has some bugs and missing features. They can be reported using an [issue tracker](https://github.com/szpak/gradle-pitest-plugin/issues).\r\nHowever it is often a better idea to send a questions to the [PIT mailing list](http://groups.google.com/group/pitusers) first.\r\n\r\nThe plugin is licensed under the terms of [the Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.txt).\r\n\r\n![Stat Counter stats](http://c.statcounter.com/9394072/0/db9b06ab/0/)\r\n\r\n","google":"UA-46065645-1","note":"Don't delete this file! It's used internally to help with page regeneration."}